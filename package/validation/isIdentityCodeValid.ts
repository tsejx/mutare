// 二代公民个人身份证号码编排规则
// 数字地址码(6) + 出生日期码(8) + 数字顺序码(3) + 数字校验码(1)

// 数字地址码：表示编码对象常住户口所在县（市、旗、区）的行政区划代码，按GB/T2260的规定执行。
// 出生日期码：表示编码对象出生的年、月、日，按GB/T7408的规定执行，年、月、日代码之间不用分隔符。
// 数字顺序码：表示在同一地址码所标识的区域范围内，对同年、同月、同日出生的人编定的顺序号，顺序码的奇数分配给男性，偶数分配给女性。
// 数字校验码：根据前面十七位数字码，按照ISO 7064:1983.MOD 11-2校验码计算出来的检验码。

// 华北地区 ---------
// 北京市 11xxxx
// 天津市 12xxxx
// 河北省 13xxxx
// 山西省 14xxxx
// 内蒙古自治区 15xxxx
// 东北地区 ---------
// 辽宁省 21xxxx
// 吉林省 22xxxx
// 黑龙江省 23xxxx
// 华东地区 ---------
// 上海市 31xxxx
// 江苏省 32xxxx
// 浙江省 33xxxx
// 安徽省 34xxxx
// 福建省 35xxxx
// 江西省 36xxxx
// 山东省 37xxxx
// 华中地区 ---------
// 河南省 41xxxx
// 湖北省 42xxxx
// 湖南省 43xxxx
// 华南地区 ---------
// 广东省 44xxxx
// 广西壮族自治区 45xxxx
// 海南省 46xxxx
// 西南地区 ---------
// 四川省 51xxxx
// 贵州省 52xxxx
// 云南省 53xxxx
// 西藏自治区 54xxxx
// 重庆市 55xxxx
// 西北地区 ---------
// 陕西省 61xxxx
// 甘肃省 62xxxx
// 青海省 63xxxx
// 宁夏回族自治区 64xxxx
// 新疆维吾尔自治区 65xxxx
// 特别地区 ---------
// 台湾地区 (886)|71xxxx
// 香港特别行政区 (852)|81xxxx
// 澳门特别行政区 (853)|82xxxx
// 国外 91xxxx

// 通用校验
const identification = /^\d{6}(((19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])\d{3}([0-9]|x|X))|(\d{2}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])\d{3}))$/;

export function isIdentityCodeValid(code) {
  let _code = code + '';

  const city = {
    11: '北京',
    12: '天津',
    13: '河北',
    14: '山西',
    15: '内蒙古',
    21: '辽宁',
    22: '吉林',
    23: '黑龙江 ',
    31: '上海',
    32: '江苏',
    33: '浙江',
    34: '安徽',
    35: '福建',
    36: '江西',
    37: '山东',
    41: '河南',
    42: '湖北 ',
    43: '湖南',
    44: '广东',
    45: '广西',
    46: '海南',
    50: '重庆',
    51: '四川',
    52: '贵州',
    53: '云南',
    54: '西藏 ',
    61: '陕西',
    62: '甘肃',
    63: '青海',
    64: '宁夏',
    65: '新疆',
    71: '台湾',
    81: '香港',
    82: '澳门',
    91: '国外 ',
  };

  if (
    !_code ||
    !/^\d{6}(18|19|20)?\d{2}(0[1-9]|1[12])(0[1-9]|[12]\d|3[01])\d{3}(\d|X)$/i.test(_code)
  ) {
    throw Error('Identification card format is invalid!');
    return false;
  } else if (!city[_code.substr(0, 2)]) {
    throw Error('Address code is invalid!');
    return false;
  } else {
    //18位身份证需要验证最后一位校验位
    if (code.length == 18) {
      let codeArr = _code.split('');
      //∑(ai×Wi)(mod 11)
      //加权因子
      const factor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
      //校验位
      const parity = [1, 0, 'X', 9, 8, 7, 6, 5, 4, 3, 2];
      let sum = 0;
      let ai = 0;
      let wi = 0;

      for (let i = 0; i < 17; i++) {
        ai = codeArr[i];
        wi = factor[i];
        sum += ai * wi;
      }

      if (parity[sum % 11] != code[17]) {
        throw Error('Check code is invalid!');
        return false;
      }
    }
  }
}
